// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack Central Processing unit (CPU).
 * The CPU consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 *
 * In particular, it functions as follows:
 * Parses the binary code in the instruction input and executes it according to
 * the Hack machine language specification. 
 * In the case of a C-instruction, computes the function specified by the instruction.
 * If the instruction specifies to read a memory value,
 * the inM input is expected to contain this value.
 *
 * The D and A in the language specification refer to CPU-resident registers.
 * M refers to the external memory location addressed by A (i.e. to Memory[A]). 
 * The inM input holds the value of this location. 
 *
 * If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). 
 *
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, then the CPU jumps to
 * address 0 (sets pc to 0 in the next time unit) rather than to the address
 * resulting from executing the current instruction.
 *
 * NOTE:
 * The outM and writeM outputs are combinational: they are affected instantaneously
 * by the instruction's execution during the current cycle.
 * The addressM and pc outputs are clocked: although they are affected by the
 * instruction's execution, they commit to their new values only in the
 * next cycle (next time unit).
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

     PARTS:
     // ---------- INSTRUCTION DECODING ----------
     // Determine input to A-register depending whether A-instruction or C-instruction
     Mux16(a[0..14]=instruction[0..14], a[15]=false, b=outALU, sel=instruction[15], out=inputA);    
     
     // Determine write to A (register), D (register), M (memory)
     And(a=instruction[15], b=instruction[3], out=writeM);
     And(a=instruction[15], b=instruction[4], out=loadD);
     Not(in=instruction[15], out=instructA);
     Or(a=instructA, b=instruction[5], out=loadA);
 

     // ---------- INSTRUCTION EXECUTION ----------
     ARegister(in=inputA, load=loadA, out[0..14]=addressM, out=outA);
     DRegister(in=outALU, load=loadD, out=x);
     
     // Determine computation type (for a=0, use A; for a=1, use M)
     Mux16(a=outA, b=inM, sel=instruction[12], out=y);

     ALU(x=x, y=y, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], zr=zero, ng=negative, out=outALU, out=outM);

     
     // ---------- NEXT INSTRUCTION FETCHING ----------
     // Determine jump according to ALU output
     Or(a=zero, b=negative, out=zrng);
     Not(in=zrng, out=positive);

     // if out > 0 jump; implies JGE and JNE
     And(a=instruction[0], b=positive, out=jgt);
     // if out = 0 jump; implies JGE and JLE
     And(a=instruction[1], b=zero, out=jeq);
     // if out < 0; imples JLE and JNE
     And(a=instruction[2], b=negative, out=jlt);
     // if out <= 0 jump
     Or(a=jlt, b=jeq, out=jle);
     // Jump
     Or(a=jle, b=jgt, out=jmp);

     // Jump only if C-instruction, not A-instruction
     And(a=jmp, b=instruction[15], out=jump);
     PC(in=outA, load=jump, inc=true, reset=reset, out[0..14]=pc, out[15]=false);
}
