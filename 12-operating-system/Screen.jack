// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    
    static Array screen;
    static boolean currentColor;
    static int whitePixel;
    static int blackPixel;
    static boolean white;
    static boolean black;
 
    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let white = false;
        let black = true;
        let whitePixel = 0;
        let blackPixel = 1;
        let currentColor = black;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {
            let screen[i] = white;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currentColor = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        var int mask;

        let address = (y * 32) + (x / 16);
        let mask = Math.twoToThe(x & 15));

        if (currentColor) {
            let screen[address] = screen[address] | mask;
        }
        else {
            let screen[address] = screen[address] & ~mask;
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy;
        var int temp;
        
        // Make sure x1 <= x2
        if( x1 > x2 ) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;
        
        if( dx = 0 ) {
            do Screen.drawVerticalLine(x1, y1, y2);
        }
        else { if( dy = 0 ) {
            do Screen.drawHorizontalLine(x1, x2, y1);
        }
        else {
            do Screen.drawDiagonalLine(x1, y1, x2, y2, dx, dy);
        }}
        
        return;
    }

    function void drawVerticalLine(int x, int y1, int y2) {
        var int temp;
        
        // Make sure y1 <= y2
        if (y1 > y2 ) {
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        
        while(~(y1 > y2)) {
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }
        return;
    }
    
    function void drawHorizontalLine(int x1, int x2, int y) {
        var int startLoc, endLoc;
        var int x1Mod16, x2Mod16;
        
        let x1Mod16 = x1 & 15;
        let x2Mod16 = x2 & 15;
        let startLoc = (y * 32) + (x1 / 16);
        let endLoc = (y * 32) + (x2 / 16) + (x2Mod16=0);

        if (startLoc = endLoc) {   
            // Line starts and ends within the same screen location
            do Screen.drawdrawLineIncrement(x1, x2, y);
        }
        else { 
            if (~(x1Mod16 = 0)) {            // Draw start of line
                let startLoc = startLoc + 1;
                do Screen.drawdrawLineIncrement(x1, x1 + 16 - x1Mod16, y);
            }
            if (~(x2Mod16 = 0)) {            // Draw end of line
                let endLoc = endLoc - 1;
                do Screen.drawdrawLineIncrement(x2 - x2Mod16, x2, y);
            }
            while (~(startLoc > endLoc)) {   // Draw middle of line
                let screen[startLoc] = currentColor;
                let startLoc = startLoc + 1;
            }
        }
        return;
    }
    
    function void drawdrawLineIncrement(int x1, int x2, int y) {
        while(~(x1 > x2)) {
            do Screen.drawPixel(x1, y);
            let x1 = x1 + 1;
        }
        return;
    }

    function void drawDiagonalLine(int x1, int y1, int x2, int y2, int dx, int dy) {
        var int a, b;
        var int diff;   // ady - bdx
        var int i;

        let a = 0;
        let b = 0;
        let diff = 0;
        
        if( dy < 0 ) {
            let i = -1;
        }
        else {
            let i = 1;
        }

        while ( ~(a > dx) & (((i = 1) & ~(b > dy)) | ((i = -1) & ~(b < dy))) ) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if( diff < 0 ) {
                let a = a + 1;
                let diff = diff + (dy * i);
            }
            else {
                let b = b + i;
                let diff = diff - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        
        let y = y1;
        while (~(y > y2)) {
            do Screen.drawHorizontalLine(x1, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;
        var int rSquared;
        
        let dy = -r;
        let rSquared = r * r;
        while (~(dy > r)) {
            let dx = Math.sqrt(rSquared - (dy * dy));
            do Screen.drawHorizontalLine(cx - dx, cx + dx, cy + dy);
            let dy = dy + 1;
        }
        return;
    }
}
